// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        internal RemoteReducers(DbConnection conn, SetReducerFlags flags) : base(conn) => SetCallReducerFlags = flags;
        internal readonly SetReducerFlags SetCallReducerFlags;
    }

    public sealed partial class RemoteTables : RemoteTablesBase
    {
        public RemoteTables(DbConnection conn)
        {
            AddTable(Message = new(conn));
            AddTable(User = new(conn));
        }
    }

    public sealed partial class SetReducerFlags { }

    public sealed class EventContext : IEventContext
    {
        private readonly DbConnection conn;
        public readonly Event<Reducer> Event;

        public RemoteTables Db => conn.Db;
        public RemoteReducers Reducers => conn.Reducers;
        public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;

        internal EventContext(DbConnection conn, Event<Reducer> Event)
        {
            this.conn = conn;
            this.Event = Event;
        }
    }

    public sealed class ReducerEventContext : IReducerEventContext
    {
        private readonly DbConnection conn;
        public readonly ReducerEvent<Reducer> Event;

        public RemoteTables Db => conn.Db;
        public RemoteReducers Reducers => conn.Reducers;
        public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;

        internal ReducerEventContext(DbConnection conn, ReducerEvent<Reducer> reducerEvent)
        {
            this.conn = conn;
            Event = reducerEvent;
        }
    }

    public sealed class ErrorContext : IErrorContext
    {
        private readonly DbConnection conn;
        public readonly Exception Event;
        Exception IErrorContext.Event
        {
            get
            {
                return Event;
            }
        }

        public RemoteTables Db => conn.Db;
        public RemoteReducers Reducers => conn.Reducers;
        public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
        public Exception Error => Event;

        internal ErrorContext(DbConnection conn, Exception error)
        {
            this.conn = conn;
            Event = error;
        }
    }

    public sealed class SubscriptionEventContext : ISubscriptionEventContext
    {
        private readonly DbConnection conn;

        public RemoteTables Db => conn.Db;
        public RemoteReducers Reducers => conn.Reducers;
        public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;

        internal SubscriptionEventContext(DbConnection conn)
        {
            this.conn = conn;
        }
    }

    public abstract partial class Reducer
    {
        private Reducer() { }
    }

    public sealed class DbConnection : DbConnectionBase<DbConnection, RemoteTables, Reducer>
    {
        public override RemoteTables Db { get; }
        public readonly RemoteReducers Reducers;
        public readonly SetReducerFlags SetReducerFlags = new();

        public DbConnection()
        {
            Db = new(this);
            Reducers = new(this, SetReducerFlags);
        }

        protected override Reducer ToReducer(TransactionUpdate update)
        {
            var encodedArgs = update.ReducerCall.Args;
            return update.ReducerCall.ReducerName switch
            {
                "identity_connected" => BSATNHelpers.Decode<Reducer.IdentityConnected>(encodedArgs),
                "identity_disconnected" => BSATNHelpers.Decode<Reducer.IdentityDisconnected>(encodedArgs),
                "send_message" => BSATNHelpers.Decode<Reducer.SendMessage>(encodedArgs),
                "set_name" => BSATNHelpers.Decode<Reducer.SetName>(encodedArgs),
                var reducer => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
            };
        }

        protected override IEventContext ToEventContext(Event<Reducer> Event) =>
        new EventContext(this, Event);

        protected override IReducerEventContext ToReducerEventContext(ReducerEvent<Reducer> reducerEvent) =>
        new ReducerEventContext(this, reducerEvent);

        protected override ISubscriptionEventContext MakeSubscriptionEventContext() =>
        new SubscriptionEventContext(this);

        protected override IErrorContext ToErrorContext(Exception exception) =>
        new ErrorContext(this, exception);

        protected override bool Dispatch(IReducerEventContext context, Reducer reducer)
        {
            var eventContext = (ReducerEventContext)context;
            return reducer switch
            {
                Reducer.IdentityConnected args => Reducers.InvokeIdentityConnected(eventContext, args),
                Reducer.IdentityDisconnected args => Reducers.InvokeIdentityDisconnected(eventContext, args),
                Reducer.SendMessage args => Reducers.InvokeSendMessage(eventContext, args),
                Reducer.SetName args => Reducers.InvokeSetName(eventContext, args),
                _ => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
            };
        }

        public SubscriptionBuilder<SubscriptionEventContext, ErrorContext> SubscriptionBuilder() => new(this);
    }
}
